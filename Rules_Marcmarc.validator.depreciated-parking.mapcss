meta {
    title: "Extended validator rules";
    version: "1.02_2023-04-15";
    description: "try to catch 'all' fixables errors and improvement";
    author: "Marcmarc";
    link: "https://github.com/Marc-marc-marc/osm-mapcss";
    min-josm-version: "14481";
    baselanguage: "en";
    -osmoseTags: list("fix:chair", "deprecated", "parking");
    -osmoseItemClassLevel: "4010/4010/2";
}
meta[lang=fr] {
    title: "Règles de validations étendues";
    description: "essaye de traiter "toutes" les erreurs corrigibles et les améliorations";
}

*[parking:condition:both=no_parking] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:both";
    fixAdd: "parking:both:restriction=no_parking";
    fixAdd: "parking:both=no";
}

*[parking:condition=no_parking] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition";
    fixAdd: "parking:both:restriction=no_parking";
    fixAdd: "parking:both=no";
}

*[parking:condition:left=no_parking] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:left";
    fixAdd: "parking:left:restriction=no_parking";
    fixAdd: "parking:left=no";
}

*[parking:condition:right=no_parking] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:right";
    fixAdd: "parking:right:restriction=no_parking";
    fixAdd: "parking:right=no";
}

*[parking:lane:both=no_parking] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:both";
    fixAdd: "parking:both=no";
}

*[parking:lane=no_parking] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane";
    fixAdd: "parking:both=no";
}

*[parking:lane:left=no_parking] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:left";
    fixAdd: "parking:left=no";
}

*[parking:lane:right=no_parking] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:right";
    fixAdd: "parking:lane:restriction=no_parking";
    fixAdd: "parking:lane=no";
}

*[parking:condition:both=no_stopping {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:both";
    fixAdd: "parking:both:restriction=no_stopping;
    fixAdd: "parking:both=no";
}

*[parking:condition=no_stopping {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition";
    fixAdd: "parking:both:restriction=no_stopping;
    fixAdd: "parking:both=no";
}

*[parking:condition:left=no_stopping {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:left";
    fixAdd: "parking:left:restriction=no_stopping;
    fixAdd: "parking:left=no";
}

*[parking:condition:right=no_stopping {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:right";
    fixAdd: "parking:right:restriction=no_stopping;
    fixAdd: "parking:right=no";
}

*[parking:condition:both=disc][!parking:both][!parking:left][!parking:right] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:both";
    fixAdd: "parking:both:authentication:disc=yes";
    fixAdd: "parking:both=yes";
}

*[parking:condition:both=disc][parking:both], *[parking:condition:both=disc][parking:left],*[parking:condition:both=disc][parking:right] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:both";
    fixAdd: "parking:both:authentication:disc=yes";
}

*[parking:condition=disc][parking:both][parking:both!=no] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition";
    fixAdd: "parking:both:authentication:disc=yes";
    fixAdd: "parking:both=yes";
}

*[parking:condition=disc] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition";
    fixAdd: "parking:authentication:disc=yes"; /* not perfect but side is unknown */
}

*[parking:condition:left=disc][!parking:left] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:left";
    fixAdd: "parking:left:authentication:disc=yes";
    fixAdd: "parking:left=yes";
}

*[parking:condition:left=disc][parking:left] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:left";
    fixAdd: "parking:left:authentication:disc=yes";
}

*[parking:condition:right=disc][!parking:right] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:right";
    fixAdd: "parking:right:authentication:disc=yes";
    fixAdd: "parking:right=yes";
}

*[parking:condition:right=disc][parking:right] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:right";
    fixAdd: "parking:right:authentication:disc=yes";
}

*[parking:condition:both=free] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:both";
    fixAdd: "parking:both:fee=no";
}

*[parking:condition=free] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition";
    fixAdd: "parking:fee=no";
}

*[parking:condition:left=free] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:left";
    fixAdd: "parking:left:fee=no";
}

*[parking:condition:right=free] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:right";
    fixAdd: "parking:right:fee=no";
}

*[parking:condition:both=ticket], *[parking:condition:both=tickets] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:both";
    fixAdd: "parking:both:fee=yes";
}

*[parking:condition=ticket], *[parking:condition=tickets] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition";
    fixAdd: "parking:fee=yes";
}

*[parking:condition:left=ticket], *[parking:condition:left=tickets] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:left";
    fixAdd: "parking:left:fee=yes";
}

*[parking:condition:right=ticket], *[parking:condition:right=tickets] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:right";
    fixAdd: "parking:right:fee=yes";
}

*[parking:condition:both=residents] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:both";
    fixAdd: "parking:both:access=private";
}

*[parking:condition=residents] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition";
    fixAdd: "parking:access=private";
}

*[parking:condition:left=residents] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:left";
    fixAdd: "parking:left:access=private";
}

*[parking:condition:right=residents] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:right";
    fixAdd: "parking:right:access=private";
}

*[parking:condition:both=customers] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:both";
    fixAdd: "parking:both:access=customers";
}

*[parking:condition=customers] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition";
    fixAdd: "parking:access=customers";
}

*[parking:condition:left=customers] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:left";
    fixAdd: "parking:left:access=customers";
}

*[parking:condition:right=customers] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:right";
    fixAdd: "parking:right:access=customers";
}

*[parking:lane:both=marked] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:both";
    fixAdd: "parking:both:markings=yes";
}

*[parking:lane=marked] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane";
    fixAdd: "parking:markings=yes";
}

*[parking:lane:left=marked] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:left";
    fixAdd: "parking:left:markings=yes";
}

*[parking:lane:right=marked] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:right";
    fixAdd: "parking:right:markings=yes";
}

/* error for parking:lane:both=marked */
*[parking:condition:both=marked] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:both";
    fixAdd: "parking:both:markings=yes";
}

*[parking:condition:both="ticket;residents"] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:both";
    fixAdd: "parking:both:fee=yes";
}

*[parking:condition="ticket;residents"] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition";
    fixAdd: "parking:fee=yes";
}

*[parking:condition:left="ticket;residents"] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:left";
    fixAdd: "parking:left:fee=yes";
}

*[parking:condition:right="ticket;residents"] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:right";
    fixAdd: "parking:right:fee=yes";
}

*[parking:condition:both=no_stopping ] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:both";
    fixAdd: "parking:both:restriction=no_stopping ";
}

*[parking:condition=no_stopping ] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition";
    fixAdd: "parking:both:restriction=no_stopping ";
}

*[parking:condition:left=no_stopping ] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:left";
    fixAdd: "parking:left:restriction=no_stopping ";
}

*[parking:condition:right=no_stopping ] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:right";
    fixAdd: "parking:right:restriction=no_stopping ";
}

*[parking:condition:both=disabled] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:both";
    fixAdd: "parking:both:access=no";
    fixAdd: "parking:both:disabled=designated";
}

*[parking:condition=disabled] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition";
    fixAdd: "parking:access=no";
    fixAdd: "parking:disabled=designated";
}

*[parking:condition:left=disabled] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:left";
    fixAdd: "parking:left:access=no";
    fixAdd: "parking:left:disabled=designated";
}

*[parking:condition:right=disabled] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:right";
    fixAdd: "parking:right:access=no";
    fixAdd: "parking:right:disabled=designated";
}

*[parking:lane:both=parallel] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:both";
    fixAdd: "parking:both:orientation=parallel";
}

*[parking:lane=parallel] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane";
    fixAdd: "parking:orientation=parallel";
}

*[parking:lane:left=parallel] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:left";
    fixAdd: "parking:left:orientation=parallel";
}

*[parking:lane:right=parallel] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:right";
    fixAdd: "parking:right:orientation=parallel";
}

*[parking:lane:both=diagonal] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:both";
    fixAdd: "parking:both:orientation=diagonal";
}

*[parking:lane=diagonal] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane";
    fixAdd: "parking:orientation=diagonal";
}

*[parking:lane:left=diagonal] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:left";
    fixAdd: "parking:left:orientation=diagonal";
}

*[parking:lane:right=diagonal] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:right";
    fixAdd: "parking:right:orientation=diagonal";
}

*[parking:lane:both=perpendicular] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:both";
    fixAdd: "parking:both:orientation=perpendicular";
}

*[parking:lane=perpendicular] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane";
    fixAdd: "parking:orientation=perpendicular";
}

*[parking:lane:left=perpendicular] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:left";
    fixAdd: "parking:left:orientation=perpendicular";
}

*[parking:lane:right=perpendicular] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:right";
    fixAdd: "parking:right:orientation=perpendicular";
}

*[parking:condition:both=no_stopping] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:both";
    fixAdd: "parking:both:restriction=no_stopping";
    fixAdd: "parking:both=no";
}

*[parking:condition=no_stopping] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition";
    fixAdd: "parking:both:restriction=no_stopping";
    fixAdd: "parking:both=no";
}

*[parking:condition:left=no_stopping] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:left";
    fixAdd: "parking:left:restriction=no_stopping";
    fixAdd: "parking:left=no";
}

*[parking:condition:right=no_stopping] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:right";
    fixAdd: "parking:right:restriction=no_stopping";
    fixAdd: "parking:right=no";
}

*[parking:lane:both=no_stopping] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:both";
    fixAdd: "parking:both:restriction=no_stopping";
    fixAdd: "parking:both=no";
}

*[parking:lane=no_stopping] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane";
    fixAdd: "parking:both:restriction=no_stopping";
    fixAdd: "parking:both=no";
}

*[parking:lane:left=no_stopping] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:left";
    fixAdd: "parking:left:restriction=no_stopping";
    fixAdd: "parking:left=no";
}

*[parking:lane:right=no_stopping] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:right";
    fixAdd: "parking:right:restriction=no_stopping";
    fixAdd: "parking:right=no";
}


*[parking:lane:both=no] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:both";
    fixAdd: "parking:both=no";
}

*[parking:lane=no] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane";
    fixAdd: "parking:both=no";
}

*[parking:lane:left=no] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:lane:left";
    fixAdd: "parking:left=no";
}

*[parking:lane:right=no] {
    throwWarning: tr("{0} is deprecated", "{0.tag}");
    group: tr("deprecated tagging");
    fixRemove: "parking:condition:right";
    fixAdd: "parking:lane:restriction=no";
    fixAdd: "parking:lane=no";
}
